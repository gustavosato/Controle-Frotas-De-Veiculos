@model Lean.Test.Cloud.MVC.Models.TimeReleases.TimeReleaseModel


<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@8"></script>


@Html.HiddenFor(model => model.TimeReleaseID)
@Html.HiddenFor(model => model.CreatedByID)
@Html.HiddenFor(model => model.CreationDate)
@Html.HiddenFor(model => model.ApprovedByID)
@Html.HiddenFor(model => model.ApprovedDate)
@Html.HiddenFor(model => model.IsApproved)



<ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item">
        <a class="nav-link active" id="timerelease-tab" data-toggle="tab" href="#timerelease" role="tab" aria-controls="timerelease" aria-selected="true">Apropriação de Horas</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="historical-tab" data-toggle="tab" href="#historical" role="tab" aria-controls="historical" aria-selected="false">Histórico de Alterações</a>
    </li>
</ul>
<div class="tab-content" id="myTabContent">
    <div class="tab-pane fade show active" id="timerelease" role="tabpanel" aria-labelledby="timerelease-tab">
        <div class="card">
            <div class="card-body">
                <div class="form-group row" id="calender-container">
                    <div class="col-md-2 mb-auto">
                        <strong>@Html.LabelFor(model => model.RegisterDate, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        <div class="input-group date">
                            @Html.TextBoxFor(model => model.RegisterDate, new { @class = "form-control", autocomplete = "off" })<span class="input-group-addon"></span>
                            @Html.ValidationMessageFor(model => model.RegisterDate, "", new { @class = "form-text text-danger" })
                        </div>
                    </div>
                    <div class="col-md-2 mb-auto">
                        <strong>@Html.LabelFor(model => model.StartWork, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        @Html.TextBoxFor(model => model.StartWork, new { @class = "form-control", placeholder = "00:00", id = "StartWork", type = "time", @autofocus = "autofocus" })
                        @Html.ValidationMessageFor(model => model.StartWork, "", new { @class = "form-text text-danger" })
                    </div>
                    <div class="col-md-2 mb-auto">
                        <strong>@Html.LabelFor(model => model.EndWork, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        @Html.TextBoxFor(model => model.EndWork, new { @class = "form-control", placeholder = "00:00", id = "EndWork", type = "time" })
                        @Html.ValidationMessageFor(model => model.EndWork, "", new { @class = "form-text text-danger" })
                    </div>
                    <div class="col-md-2 mb-auto">
                        @Html.LabelFor(model => model.TotalTime, new { @class = "col-sm-0 col-form-label text-left" })
                        @Html.TextBoxFor(model => model.TotalTime, new { @class = "form-control", @readonly = "readonly", id = "TotalTime" })
                        @Html.ValidationMessageFor(model => model.TotalTime, "", new { @class = "form-text text-danger" })
                    </div>

                    <div class="col-md-1 mb-auto">
                        @Html.LabelFor(model => model.DayTotal, new { @class = "col-sm-0 col-form-label text-left" })
                        @Html.TextBoxFor(model => model.DayTotal, new { @class = "form-control", placeholder = "00:00", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.DayTotal, "", new { @class = "form-text text-danger" })
                    </div>
                    <div class="col-md-1 mb-auto">
                        @Html.LabelFor(model => model.MounthTotal, new { @class = "col-sm-0 col-form-label text-left" })
                        @Html.TextBoxFor(model => model.MounthTotal, new { @class = "form-control", placeholder = "00:00", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.MounthTotal, "", new { @class = "form-text text-danger" })
                    </div>

                    <div class="col-md-2 mb-auto">
                        @Html.LabelFor(model => model.CreationDate, new { @class = "col-sm-0 col-form-label text-left" })

                        @Html.TextBoxFor(model => model.CreationDate, new { @class = "form-control text-left", placeholder = "Gerado automaticamente", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.CreationDate, "", new { @class = "form-text text-danger" })
                    </div>
                    <div class="col-md-8 mb-auto">
                        <strong>@Html.LabelFor(model => model.DemandID, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        @Html.DropDownList("DemandID", Model.LoadDemands, "Selecione...", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.DemandID, "", new { @class = "form-text text-danger" })
                    </div>
                    <div class="col-md-4 mb-auto">
                        <strong>@Html.LabelFor(model => model.ActivityID, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        @Html.DropDownList("ActivityID", Model.LoadActivitys, "Selecione...", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ActivityID, "", new { @class = "form-text text-danger" })
                    </div>
                    <div class="col-md-12 mb-auto">
                        <strong>@Html.LabelFor(model => model.Description, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", placeholder = "Digite uma descrição das atividades realizadas", rows = "5" })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "form-text text-danger" })
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="tab-pane fade" id="historical" role="tabpanel" aria-labelledby="historical-tab">
        <div class="card">
            <div class="card-body">
                <div class="form-group row">
                    <div class="col-md-12 mb-auto">
                        <div id="historical-grid"></div>
                        <script>
                                $(document).ready(function () {
                                    $("#historical-grid").kendoGrid({

                                dataSource: {
                                    type: "json",
                                transport: {
                                read: {
                                    url: "@Html.Raw(Url.Action("GetAll", "Historical"))",
                                    type: "POST",
                                    dataType: "json",
                                    data: additionalData
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors"
                                },
                                    error: function (e) {
                                    display_kendoui_grid_error(e);
                                    this.cancelChanges();
                                },
                                    pageSize: 10,
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: false
                                },
                                    resizable: true,
                                    groupable: true,
                                    sortable: true,
                                pageable: {
                                    refresh: true,
                                    pageSizes: true,
                                    buttonCount: 5,
                                messages: {
                                    display: '{0} - {1} de {2} itens',
                                    allPages: 'Todos',
                                    itemsPerPage: 'Itens por página'
                                }
                                },
                                columns: [{
                                            field: "FieldName",
                                            title: "Campo",
                                            width: 70,
                                            headerAttributes: { style: "text-align:left" }
                                    }, {
                                            field: "OldValue",
                                            title: "Valor Anterior",
                                            width: 100,
                                            headerAttributes: { style: "text-align:left" }
                                    }, {
                                            field: "NewValue",
                                            title: "Valor Atual",
                                            width: 100,
                                            headerAttributes: { style: "text-align:left" }
                                    }, {
                                            field: "CreatedByID",
                                            title: "Alterado por",
                                            width: 70,
                                            headerAttributes: { style: "text-align:left" }
                                    },{
                                            field: "CreationDate",
                                            title: "Data da Alteração",
                                            width: 50,
                                            headerAttributes: { style: "text-align:left" }
                                    }],
                                    excelExport: function (e) {
                                        e.workbook.fileName = "LeanTest Cloud - Anexos.xlsx";
                                    }
                                });
                            });

                        </script>
                        <script type="text/javascript">
                            $(document).ready(function () {
                                $('#btnExportExcel').click(function () {
                                    var grid = $('#historical-grid').data('kendoGrid');
                                    grid.saveAsExcel();
                                    return false;
                                });

                                $('#btn-aplicar-filtros').click(function () {
                                    var grid = $('#historical-grid').data('kendoGrid');
                                    if (grid.dataSource.page() == 1) {
                                        grid.dataSource.page(1);
                                    }
                                    else {
                                        grid.dataSource.read({ parameter: "value" });
                                    }
                                    return false;
                                });


                            });

                        function additionalData() {
                            var data = {
                                RecordID: $('#@Html.FieldIdFor(model => model.TimeReleaseID)').val(),
                                SystemFeatureID: "203"
                            };

                            addAntiForgeryToken(data);

                            return data;

                            };

                        </script>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

  

    //Lançamento de horas não pode ser feita para data futura
    $('#RegisterDate').change(function () {
        var CreationDate = document.getElementById("CreationDate").value;
        var new_CreationDate = CreationDate.toString("dd/MM/yyyy HH:mm:ss");
        CreationDate = new_CreationDate.substring(10, 0);

        //if (document.getElementById("RegisterDate").value > CreationDate) {
        //    document.getElementById("RegisterDate").value = CreationDate
        //}

    });

    $('#StartWork').change(function () {
        var StartWork
        if (document.getElementById("StartWork").value == "") {
            StartWork = "2019/01/01 00:00:00"
        }
        else {
            StartWork = "2019/01/01 " + document.getElementById("StartWork").value + ":00";
        }

        var EndWork
        if (document.getElementById("EndWork").value == "") {
            EndWork = "2019/01/01 00:00:00"
        }
        else {
            EndWork = "2019/01/01 " + document.getElementById("EndWork").value + ":00";
        }

        var horas = Math.abs(new Date(StartWork) - new Date(EndWork)) / 36e5;

        var t = parseFloat(horas).toFixed(2).replace(".", ",").split(",");
        var h = t[0];
        var m = t[1];

        h <= 9 ? h = "0" + h : h = h;
        m <= 9 ? m = "0" + (parseFloat(m * 0.60).toFixed(0)) : m = parseFloat(m * 0.60).toFixed(0)
        var result = h + ":" + m;

        document.getElementById('TotalTime').value = result;
    });

    $('#EndWork').change(function () {
        if (document.getElementById("EndWork").value == "00:00")
            document.getElementById("EndWork").value = "23:59";

        var StartWork
        if (document.getElementById("StartWork").value == "") {
            StartWork = "2019/01/01 00:00:00"
        }
        else {
            StartWork = "2019/01/01 " + document.getElementById("StartWork").value + ":00";
        }

        var EndWork
        if (document.getElementById("EndWork").value == "") {
            EndWork = "2019/01/01 00:00:00"
        }
        else {
            EndWork = "2019/01/01 " + document.getElementById("EndWork").value + ":00";
        }

        var horas = Math.abs(new Date(StartWork) - new Date(EndWork)) / 36e5;

        var t = parseFloat(horas).toFixed(2).replace(".", ",").split(",");
        var h = t[0];
        var m = t[1];

        h <= 9 ? h = "0" + h : h = h;
        m <= 9 ? m = "0" + (parseFloat(m * 0.60).toFixed(0)) : m = parseFloat(m * 0.60).toFixed(0)
        var result = h + ":" + m;

        document.getElementById('TotalTime').value = result;
    });

    function ValidarCampo() {
        return true
        var StartingWork = document.getElementById("StartWork").value;
        var FinishingWork = document.getElementById("EndWork").value;
        var Description = document.getElementById("Description").value;

      if (StartingWork === FinishingWork) {
            Swal.fire({
                position: 'top-center',
                type: 'error',
                text: 'Horário de início de trabalho não pode ser igual ao horário de término!!!',
                showConfirmButton: false,
                confirmButtonColor: "#9ACD32",
                timer: 2500
            })
            return false
        }
        else if (StartingWork > FinishingWork) {
            Swal.fire({
                position: 'top-center',
                type: 'error',
                text: 'Horário de início de trabalho maior do que horário de término!!!',
                showConfirmButton: false,
                confirmButtonColor: "#9ACD32",
                timer: 2500
            })
            return false
        }

        else {
            return true
        }
    }
    
</script>
