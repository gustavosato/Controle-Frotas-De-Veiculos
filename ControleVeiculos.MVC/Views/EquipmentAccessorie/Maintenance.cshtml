@model ControleVeiculos.MVC.Models.EquipmentAccessories.EquipmentAccessorieModel

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@8"></script>

@Html.HiddenFor(model => model.CreatedByID)
@Html.HiddenFor(model => model.EquipmentAccessorieID)

<ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item">
        <a class="nav-link active" id="detail-tab" data-toggle="tab" href="#detail" role="tab" aria-controls="detail" aria-selected="true">Detalhes</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="historical-tab" data-toggle="tab" href="#historical" role="tab" aria-controls="historical" aria-selected="false">Histórico de Alterações</a>
    </li>
</ul>
<div class="tab-content" id="myTabContent">
    <div class="tab-pane fade show active" id="detail" role="tabpanel" aria-labelledby="detail-tab">
        <div class="card">
            <div class="card-body">
                <div class="form-group row">

                    <div class="col-md-2 mb-auto">
                        @Html.LabelFor(model => model.Invoicing, new { @class = "col-sm-0 col-form-label text-left" })
                        @Html.CheckBoxFor(model => model.Invoicing, new { @class = "checkbox" })
                        @Html.ValidationMessageFor(model => model.Invoicing, "", new { @class = "form-text text-danger" })
                    </div>
                    <div class="col-md-4 mb-auto">
                        <strong>@Html.LabelFor(model => model.TypeID, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        @Html.DropDownList("TypeID", Model.LoadTypes, "Selecione...", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TypeID, "", new { @class = "form-text text-danger" })
                    </div>
                    <div class="col-md-4 mb-auto">
                        <strong>@Html.LabelFor(model => model.ModelNames, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        @Html.TextBoxFor(model => model.ModelNames, new { @class = "form-control", placeholder = "Digite o modelo" })
                        @Html.ValidationMessageFor(model => model.ModelNames, "", new { @class = "form-text text-danger" })
                    </div>
                    <div class="col-md-2 mb-auto">
                        @Html.LabelFor(model => model.CreationDate, new { @class = "col-sm-0 col-form-label text-left" })
                        @Html.TextBoxFor(model => model.CreationDate, new { @class = "form-control text-left", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.CreationDate, "", new { @class = "form-text text-danger" })
                    </div>

                    <div class="col-md-4 mb-auto">
                        <strong>@Html.LabelFor(model => model.SerialNumbers, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        @Html.TextBoxFor(model => model.SerialNumbers, new { @class = "form-control", placeholder = "Digite o número de série", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.SerialNumbers, "", new { @class = "form-text text-danger" })

                    </div>


                    <div class="col-md-2 mb-auto" id="calender-container">
                        <strong>@Html.LabelFor(model => model.StartDate, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        <div class="input-group date">
                            @Html.TextBoxFor(model => model.StartDate, new { @class = "form-control", autocomplete = "off", placeholder = "Selecione..." })<span class="input-group-addon"></span>
                            @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "form-text text-danger" })
                        </div>
                    </div>
                    <div class="col-md-2 mb-auto" id="calender-container">
                        @Html.LabelFor(model => model.EndDate, new { @class = "col-sm-0 col-form-label text-left" })
                        <div class="input-group date">
                            @Html.TextBoxFor(model => model.EndDate, new { @class = "form-control", autocomplete = "off", placeholder = "Selecione..." })<span class="input-group-addon"></span>
                            @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "form-text text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4 mb-auto">
                        <strong>@Html.LabelFor(model => model.AssignToID, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        @Html.DropDownList("AssignToID", Model.LoadAssignTo, "Selecione...", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.AssignToID, "", new { @class = "form-text text-danger" })
                    </div>
                    <div class="col-md-12 mb-auto">
                        @Html.LabelFor(model => model.Description, new { @class = "col-sm-0 col-form-label text-left" })
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", placeholder = "Digite uma descrição", rows = "2" })
                        <script>
                            $(document).ready(function () {
                                $("#Description").kendoEditor({
                                    tools: [
                                        "formatting",
                                        "bold", "italic", "underline", "strikethrough",
                                        "justifyLeft", "justifyCenter", "justifyRight", "justifyFull",
                                        "insertUnorderedList", "insertOrderedList", "indent", "outdent",
                                        "createLink", "unlink", "insertImage", "insertFile",
                                        "subscript", "superscript",
                                        "tableWizard", "createTable",
                                        "addRowAbove", "addRowBelow",
                                        "addColumnLeft", "addColumnRight",
                                        "deleteRow", "deleteColumn",
                                        "viewHtml", "cleanFormatting",
                                        "fontName", "fontSize",
                                        "foreColor", "backColor"
                                    ],
                                    messages: {
                                        fontNameInherit: "Arial",
                                        fontSizeInherit: "3 (12pt)"
                                    },
                                    resizable: true
                                });
                            });
                        </script>
                    </div>

                </div>
            </div>
        </div>
    </div>



    <div class="tab-pane fade" id="historical" role="tabpanel" aria-labelledby="historical-tab">
        <div class="card">
            <div class="card-body">
                <div class="form-group row">
                    <div class="col-md-12 mb-auto">
                        <div id="historical-grid"></div>
                        <script>

                                $(document).ready(function () {
                                    $("#historical-grid").kendoGrid({

                                dataSource: {
                                    type: "json",
                                transport: {
                                read: {
                                    url: "@Html.Raw(Url.Action("GetAll", "Historical"))",
                                    type: "POST",
                                    dataType: "json",
                                    data: additionalData
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors"
                                },
                                    error: function (e) {
                                    display_kendoui_grid_error(e);
                                    this.cancelChanges();
                                },
                                    pageSize: 10,
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: false
                                },
                                    resizable: true,
                                    groupable: true,
                                    sortable: true,
                                pageable: {
                                    refresh: true,
                                    pageSizes: true,
                                    buttonCount: 5,
                                messages: {
                                    display: '{0} - {1} de {2} itens',
                                    allPages: 'Todos',
                                    itemsPerPage: 'Itens por página'
                                }
                                },
                                columns: [{
                                            field: "FieldName",
                                            title: "Campo",
                                            width: 70,
                                            headerAttributes: { style: "text-align:left" }
                                    }, {
                                            field: "OldValue",
                                            title: "Valor Anterior",
                                            width: 100,
                                            headerAttributes: { style: "text-align:left" }
                                    }, {
                                            field: "NewValue",
                                            title: "Valor Atual",
                                            width: 100,
                                            headerAttributes: { style: "text-align:left" }
                                    }, {
                                            field: "CreatedByID",
                                            title: "Alterado por",
                                            width: 70,
                                            headerAttributes: { style: "text-align:left" }
                                    },{
                                            field: "CreationDate",
                                            title: "Data da Alteração",
                                            width: 50,
                                            headerAttributes: { style: "text-align:left" }
                                    }],
                                    excelExport: function (e) {
                                        e.workbook.fileName = "LeanTest Cloud - Histórico Tarefas.xlsx";
                                    }
                                });
                            });

                        </script>
                        <script type="text/javascript">
                            $(document).ready(function () {
                                $('#btnExportExcel').click(function () {
                                    var grid = $('#historical-grid').data('kendoGrid');
                                    grid.saveAsExcel();
                                    return false;
                                });

                                $('#btn-aplicar-filtros').click(function () {
                                    var grid = $('#historical-grid').data('kendoGrid');
                                    if (grid.dataSource.page() == 1) {
                                        grid.dataSource.page(1);
                                    }
                                    else {
                                        grid.dataSource.read({ parameter: "value" });
                                    }
                                    return false;
                                });

                            });

                        function additionalData() {
                            var data = {
                                RecordID: $('#@Html.FieldIdFor(model => model.EquipmentAccessorieID)').val(),
                                SystemFeatureID: "314"
                            };

                            addAntiForgeryToken(data);

                            return data;

                            };
                        </script>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">

    $('#AmountInvoicing').change(function () {
        var Subtotal

        if (document.getElementById("AmountInvoicing").value == "") {
            AmountInvoicing = "0.00"
        }
        else {
            AmountInvoicing = document.getElementById("AmountInvoicing").value.replace(",", ".").replace("R$ ", "");
        }

        document.getElementById('AmountInvoicing').value = "R$ " + parseFloat(AmountInvoicing.replace("R$", "")).toFixed(2).replace(".", ",");
    });

</script>

<script language="Javascript">
    function ComparaDatas() {
        var StartingDate = document.getElementById("StartingDate").value;
        var ClosingDate = document.getElementById("ClosingDate").value;

        var nova_StartingDate = parseInt(StartingDate.split("/")[2].toString() + StartingDate.split("/")[1].toString() + StartingDate.split("/")[0].toString());
        var nova_ClosingDate = parseInt(ClosingDate.split("/")[2].toString() + ClosingDate.split("/")[1].toString() + ClosingDate.split("/")[0].toString());

        if (nova_ClosingDate > nova_StartingDate) {
            return true
        }
        else if (nova_StartingDate > nova_ClosingDate) {
            Swal.fire({
                position: 'top-center',
                type: 'error',
                text: 'Data de início da vigência superior a data de término da vigência!!!',
                showConfirmButton: false,
                confirmButtonColor: "#9ACD32",
                timer: 2500
            })
            return false
        }
        else {
            return true
        }
    }


</script>

