@model ControleVeiculos.MVC.Models.PipelineEvents.PipelineEventModel


<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
@*<script src="https://cdn.jsdelivr.net/npm/sweetalert2@8"></script>*@

@Html.HiddenFor(model => model.SaleEventID)
@Html.HiddenFor(model => model.CreatedByID)


<ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item">
        <a class="nav-link active" id="pipelineevent-tab" data-toggle="tab" href="#pipelineevent" role="tab" aria-controls="pipelineevent" aria-selected="true">Eventos de Pipeline</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="historicalevent-tab" data-toggle="tab" href="#historicalevent" role="tab" aria-controls="historicalevent" aria-selected="false">Histórico de Alterações</a>
    </li>
</ul>
<div class="tab-content" id="myTabContent">
    <div class="tab-pane fade show active" id="pipelineevent" role="tabpanel" aria-labelledby="pipelineevent-tab">
        <br />
        <div class="card">
            <div class="card-body">
                <div class="form-group row">
                    @if (@Model.OportunityID != "0")
                    {
                    <div class="col-md-6 mb-auto">
                        <strong>@Html.LabelFor(model => model.OportunityID, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        @Html.DropDownList("OportunityID", Model.LoadOportunity, "Selecione...", new { @class = "form-control", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.OportunityID, "", new { @class = "form-text text-danger" })
                    </div>
                    }
                    else
                    {
                    <div class="col-md-6 mb-auto">
                        <strong>@Html.LabelFor(model => model.OportunityID, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        @Html.DropDownList("OportunityID", Model.LoadOportunity, "Selecione...", new { @class = "form-control", @autofocus = "autofocus" })
                        @Html.ValidationMessageFor(model => model.OportunityID, "", new { @class = "form-text text-danger" })
                    </div>
                    }
                    <div class="col-md-4 mb-auto">
                        @Html.LabelFor(model => model.CreatedByID, new { @class = "col-sm-0 col-form-label text-left" })
                        @Html.DropDownList("CreatedByID", Model.LoadCreateds, "Selecione...", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CreatedByID, "", new { @class = "form-text text-danger" })
                    </div>
                    <div class="col-md-2 mb-auto">
                        @Html.LabelFor(model => model.CreationDate, new { @class = "col-sm-0 col-form-label text-left" })
                        @Html.TextBoxFor(model => model.CreationDate, new { @class = "form-control text-left", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.CreationDate, "", new { @class = "form-text text-danger" })
                    </div>
                    <div class="col-md-4 mb-auto">
                        <strong>@Html.LabelFor(model => model.TypeID, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        @Html.DropDownList("TypeID", Model.LoadType, "Selecione...", new { @class = "form-control", @autofocus = "autofocus" })
                        @Html.ValidationMessageFor(model => model.TypeID, "", new { @class = "form-text text-danger" })
                    </div>

                    <div class="col-md-2 mb-auto" id="calender-container">
                        <strong>@Html.LabelFor(model => model.RegisterDate, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        <div class="input-group date">
                            @Html.TextBoxFor(model => model.RegisterDate, new { @class = "form-control", autocomplete = "off", placeholder = "Selecione..." })<span class="input-group-addon"></span>
                            @Html.ValidationMessageFor(model => model.RegisterDate, "", new { @class = "form-text text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4 mb-auto">
                        <strong>@Html.LabelFor(model => model.NextStepID, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        @Html.DropDownList("NextStepID", Model.LoadNextStep, "Selecione...", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.NextStepID, "", new { @class = "form-text text-danger" })
                    </div>
                    <div class="col-md-2 mb-auto" id="calender-container">
                        @Html.LabelFor(model => model.TargetDate, new { @class = "col-sm-0 col-form-label text-left" })
                        <div class="input-group date">
                            @Html.TextBoxFor(model => model.TargetDate, new { @class = "form-control", autocomplete = "off", placeholder = "Selecione..." })<span class="input-group-addon"></span>
                            @Html.ValidationMessageFor(model => model.TargetDate, "", new { @class = "form-text text-danger" })
                        </div>
                    </div>
                    <div class="col-md-12 mb-auto">
                        <strong>@Html.LabelFor(model => model.Description, new { @class = "col-sm-0 col-form-label text-left" })</strong>
                        <strong><span style="color:black;">*</span></strong>
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", placeholder = "Digite uma descrição", rows = "6" })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "form-text text-danger" })

                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="tab-pane fade" id="historicalevent" role="tabpanel" aria-labelledby="historicalevent-tab">
        <div class="card">
            <div class="card-body">
                <div class="form-group row">
                    <div class="col-md-12 mb-auto">
                        <div id="historical-grid"></div>
                        <script>

                        $(document).ready(function () {
                            $("#historical-grid").kendoGrid({

                        dataSource: {
                            type: "json",
                        transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("GetAll", "Historical"))",
                            type: "POST",
                            dataType: "json",
                            data: additionalData
                            }
                        },
                        schema: {
                            data: "Data",
                            total: "Total",
                            errors: "Errors"
                        },
                            error: function (e) {
                            display_kendoui_grid_error(e);
                            this.cancelChanges();
                        },
                            pageSize: 10,
                            serverPaging: true,
                            serverFiltering: true,
                            serverSorting: false
                        },
                            resizable: true,
                            groupable: true,
                            sortable: true,
                        pageable: {
                            refresh: true,
                            pageSizes: true,
                            buttonCount: 5,
                        messages: {
                            display: '{0} - {1} de {2} itens',
                            allPages: 'Todos',
                            itemsPerPage: 'Itens por página'
                        }
                        },
                        columns: [{
                                    field: "FieldName",
                                    title: "Campo",
                                    width: 70,
                                    headerAttributes: { style: "text-align:left" }
                            }, {
                                    field: "OldValue",
                                    title: "Valor Anterior",
                                    width: 100,
                                    headerAttributes: { style: "text-align:left" }
                            }, {
                                    field: "NewValue",
                                    title: "Valor Atual",
                                    width: 100,
                                    headerAttributes: { style: "text-align:left" }
                            }, {
                                    field: "CreatedByID",
                                    title: "Alterado por",
                                    width: 70,
                                    headerAttributes: { style: "text-align:left" }
                            },{
                                    field: "CreationDate",
                                    title: "Data da Alteração",
                                    width: 50,
                                    headerAttributes: { style: "text-align:left" }
                            }],
                            excelExport: function (e) {
                                e.workbook.fileName = "LeanTest Cloud - Anexos.xlsx";
                            }
                        });
                    });

                        </script>
                        <script type="text/javascript">
                    $(document).ready(function () {
                        $('#btnExportExcel').click(function () {
                            var grid = $('#historical-grid').data('kendoGrid');
                            grid.saveAsExcel();
                            return false;
                        });

                        $('#btn-aplicar-filtros').click(function () {
                            var grid = $('#historical-grid').data('kendoGrid');
                            if (grid.dataSource.page() == 1) {
                                grid.dataSource.page(1);
                            }
                            else {
                                grid.dataSource.read({ parameter: "value" });
                            }
                            return false;
                        });


                    });

                function additionalData() {
                    var data = {
                        RecordID: $('#@Html.FieldIdFor(model => model.SaleEventID)').val(),
                        SystemFeatureID: "322"
                    };

                    addAntiForgeryToken(data);

                    return data;

                    };

                        </script>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script language="Javascript">
    function ComparaDatas() {
        var RegisterDate = document.getElementById("RegisterDate").value;
        var TargetDate = document.getElementById("TargetDate").value;

        var nova_RegisterDate = parseInt(RegisterDate.split("/")[2].toString() + RegisterDate.split("/")[1].toString() + RegisterDate.split("/")[0].toString());
        var nova_TargetDate = parseInt(TargetDate.split("/")[2].toString() + TargetDate.split("/")[1].toString() + TargetDate.split("/")[0].toString());

        if (nova_TargetDate > nova_RegisterDate) {
            return true
        }
        else if (nova_RegisterDate > nova_TargetDate) {
            Swal.fire({
                position: 'top-center',
                type: 'error',
                text: 'Data do evento não pode ser maior que a data alvo!!!',
                showConfirmButton: false,
                confirmButtonColor: "#9ACD32",
                timer: 2500
            })
            return false
        }
        else {
            return true
             }
    }

    function ValidarCampo() {
        var Description = document.getElementById("Description").value;

        if (Description !== "") {
            return true
        }
        else if (Description === "") {
            Swal.fire({
                position: 'top-center',
                type: 'error',
                text: 'Descrição é um campo de preenchimento obrigatório!!!',
                showConfirmButton: false,
                confirmButtonColor: "#9ACD32",
                timer: 2500
            })
            return false
        }
        else {
            return true
        }
    }



</script>


@Html.HiddenFor(model => model.OportunityID)
