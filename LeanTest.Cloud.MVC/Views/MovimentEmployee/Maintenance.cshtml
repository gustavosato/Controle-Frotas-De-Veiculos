@model Lean.Test.Cloud.MVC.Models.MovimentEmployees.MovimentEmployeeModel


<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@8"></script>


@Html.HiddenFor(model => model.MovimentEmployeeID)
@Html.HiddenFor(model => model.StatusID)
@Html.HiddenFor(model => model.CreatedByID)


<div class="form-group row">

    <div class="col-md-4 mb-auto">
        <strong>@Html.LabelFor(model => model.EmployeeID, new { @class = "col-sm-0 col-form-label text-left" })</strong>
        <strong><span style="color:black;">*</span></strong>
        @Html.DropDownList("employeeID", Model.LoadEmployees, "Selecione...", new { @class = "form-control", @autofocus = "autofocus" })
        @Html.ValidationMessageFor(model => model.EmployeeID, "", new { @class = "form-text text-danger" })
    </div>


    <div class="col-md-2 mb-auto">
        <strong>@Html.LabelFor(model => model.MovimentEmployeeTypeID, new { @class = "col-sm-0 col-form-label text-left" })</strong>
        <strong><span style="color:black;">*</span></strong>
        @Html.DropDownList("MovimentEmployeeTypeID", Model.LoadMovimentEmployeeTypes, "Selecione...", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.MovimentEmployeeTypeID, "", new { @class = "form-text text-danger" })
    </div>

    <div class="col-md-2 mb-auto" id="calender-container">
        <strong>@Html.LabelFor(model => model.StartDate, new { @class = "col-sm-0 col-form-label text-left" })</strong>
        <strong><span style="color:black;">*</span></strong>
        <div class="input-group date">
            @Html.TextBoxFor(model => model.StartDate, new { @class = "form-control", autocomplete = "off", placeholder = "Selecione..." })<span class="input-group-addon"></span>
            @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "form-text text-danger" })
        </div>
    </div>

    <div class="col-md-2 mb-auto" id="calender-container">
        <strong>@Html.LabelFor(model => model.EndDate, new { @class = "col-sm-0 col-form-label text-left" })</strong>
        <strong><span style="color:black;">*</span></strong>
        <div class="input-group date">
            @Html.TextBoxFor(model => model.EndDate, new { @class = "form-control", autocomplete = "off", placeholder = "Selecione..." })<span class="input-group-addon"></span>
            @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "form-text text-danger" })
        </div>
    </div>

    <div class="col-md-2 mb-auto">
        @Html.LabelFor(model => model.CreationDate, new { @class = "col-sm-0 col-form-label text-left" })

        @Html.TextBoxFor(model => model.CreationDate, new { @class = "form-control text-left", @readonly = "readonly" })
        @Html.ValidationMessageFor(model => model.CreationDate, "", new { @class = "form-text text-danger" })
    </div>

    <div class="col-md-12 mb-auto">
        @Html.LabelFor(model => model.Description, new { @class = "col-sm-0 col-form-label text-left" })
        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", placeholder = "Digite uma descrição", rows = "2" })
        <script>
            $(document).ready(function () {
                $("#Description").kendoEditor({
                    tools: [
                        "formatting",
                        "bold", "italic", "underline", "strikethrough",
                        "justifyLeft", "justifyCenter", "justifyRight", "justifyFull",
                        "insertUnorderedList", "insertOrderedList", "indent", "outdent",
                        "createLink", "unlink", "insertImage", "insertFile",
                        "subscript", "superscript",
                        "tableWizard", "createTable",
                        "addRowAbove", "addRowBelow",
                        "addColumnLeft", "addColumnRight",
                        "deleteRow", "deleteColumn",
                        "viewHtml", "cleanFormatting",
                        "fontName", "fontSize",
                        "foreColor", "backColor"
                    ],
                    messages: {
                        fontNameInherit: "Arial",
                        fontSizeInherit: "3 (12pt)"
                    },
                    resizable: true
                });
            });

              
            function ComparaDatas() {
                var StartingDate = document.getElementById("StartDate").value;
                var ClosingDate = document.getElementById("EndDate").value;

                var nova_StartingDate = parseInt(StartingDate.split("/")[2].toString() + StartingDate.split("/")[1].toString() + StartingDate.split("/")[0].toString());
                var nova_ClosingDate = parseInt(ClosingDate.split("/")[2].toString() + ClosingDate.split("/")[1].toString() + ClosingDate.split("/")[0].toString());

                if (nova_ClosingDate > nova_StartingDate) {
                    return true
                }
                else if (nova_StartingDate > nova_ClosingDate) {
                    Swal.fire({
                        position: 'top-center',
                        type: 'error',
                        text: 'Data de início maior que a data de término!!!',
                        showConfirmButton: false,
                        confirmButtonColor: "#9ACD32",
                        timer: 2500
                    })
                    return false
                }
                else {
                    return true
                }
            }

        </script>
    </div>
</div>

